{"version":3,"sources":["CreatePortfolio.js","CreateStock.js","Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["CreatePortfolio","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","toggle","bind","assertThisInitialized","setState","_this2","_this$props","portfolioName","handleChangePortfolio","createPortfolio","react_default","a","createElement","Button","className","onClick","Modal","isOpen","ModalHeader","ModalBody","Input","type","placeholder","size","value","onChange","ModalFooter","outline","color","Component","CreateStock","stockName","stockQuantity","handleChangeStock","addStock","index","Label","name","Portfolio","e","target","defineProperty","alert","portfolio","portfolios","newPortfolio","isEuro","stocks","push","removePortfolio","i","splice","toUpperCase","axios","get","concat","then","res","data","unitValue","values","total","Number","parseFloat","toFixed","stock","totalValue","catch","toggleButton","update","$set","selectedStock","selectedStocks","includes","indexOf","removeSelectedStocks","newStocks","filter","item","countValue","map","reduce","num","exchangeRate","currencyObj","_this3","key","style","borderRadius","window","confirm","stockItem","src_CreateStock","src_CreatePortfolio","App","Container","fluid","src_Portfolio","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa4bc5e2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Button, Input, Modal, ModalFooter, ModalBody, ModalHeader} from 'reactstrap';\r\n\r\n//Creating new portfolio\r\nclass CreatePortfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modal: false,\r\n        };\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    //Toggling of the state\r\n    toggle() {\r\n        this.setState({\r\n            modal: !this.state.modal,\r\n        });\r\n    }\r\n    render() {\r\n        const {portfolioName, handleChangePortfolio, createPortfolio} = this.props\r\n        return (\r\n            <div>\r\n                <Button className=\"addPortfolio\" onClick={this.toggle}>Add new Portfolio</Button>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                    <ModalHeader>Create a portfolio</ModalHeader>\r\n                    <ModalBody>\r\n                        <Input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Give a Portfolio Name\"\r\n                            size=\"30\"\r\n                            value={portfolioName}\r\n                            onChange={handleChangePortfolio}\r\n                        />\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"secondary\" onClick={this.toggle}>Cancel</Button>{' '}\r\n                        <Button outline color=\"secondary\" onClick={()=>createPortfolio(this.toggle)}>Add</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreatePortfolio","import React, {Component} from 'react';\r\nimport {Button,Input, Label, Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap';\r\n\r\n//Creating a stock\r\nclass CreateStock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modal: false,\r\n        };\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            modal: !this.state.modal,\r\n        });\r\n    }\r\n    render() {\r\n        const {stockName, stockQuantity, handleChangeStock, addStock, index} = this.props;\r\n        return (\r\n            <div>\r\n                <div><Button outline color=\"success\" className=\"addStock\" onClick={this.toggle}>Add Stock</Button></div>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                    <ModalHeader>Add a stock</ModalHeader>\r\n                    <ModalBody>\r\n                        <form>\r\n                            <div>\r\n                                <Label><h6>Stock Name</h6></Label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Give a Stock Name\"\r\n                                    name=\"stockName\"\r\n                                    value={stockName}\r\n                                    onChange={handleChangeStock}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <Label><h6>Quantity</h6></Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"0\"\r\n                                    name=\"stockQuantity\"\r\n                                    value={stockQuantity}\r\n                                    onChange={handleChangeStock}\r\n                                />\r\n                            </div>\r\n                        </form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button outline color=\"secondary\" onClick={this.toggle}>Cancel</Button>{' '}\r\n                        <Button outline color=\"secondary\" onClick={()=>addStock(index, this.toggle)}>Add</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateStock","import React, {Component} from 'react';\r\nimport CreatePortfolio from './CreatePortfolio';\r\nimport CreateStock from './CreateStock';\r\nimport axios from 'axios';\r\nimport update from 'immutability-helper';\r\nimport { Button } from 'reactstrap';\r\n\r\nclass Portfolio extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            portfolioName: '',\r\n            stockName: '',\r\n            stockQuantity: 1,\r\n            portfolios: [],\r\n            exchangeRate: '',\r\n            selectedStocks: [],\r\n        }\r\n    }\r\n\r\n    //Getting the exchange rate from USD-->EUR\r\n    UNSAFE_componentWillMount() {\r\n        axios\r\n            .get(\r\n                `https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=7GD9LVHF7J90R06C`\r\n            )\r\n            .then(res => {\r\n                const exchangeObj = res.data['Realtime Currency Exchange Rate'];\r\n                const currencyObj = exchangeObj['5. Exchange Rate'];\r\n                this.setState({\r\n                    exchangeRate: currencyObj,\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n    handleChangePortfolio = (e)=>{\r\n        this.setState({\r\n            portfolioName: e.target.value,\r\n        })\r\n\r\n    }\r\n    handleChangeStock = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        })\r\n    }\r\n\r\n    //Creating a new Portfolio\r\n    createPortfolio = (toggle)=>{\r\n        if(this.state.portfolioName === ''){\r\n            alert('Please give a name to your portfolio')\r\n        } else{\r\n            const portfolio = this.state.portfolios;\r\n            const newPortfolio = {\r\n                name: this.state.portfolioName,\r\n                isEuro: true,\r\n                stocks: [],\r\n            }\r\n            portfolio.push(newPortfolio)\r\n            this.setState({\r\n                portfolioName: '',\r\n                portfolios: portfolio,\r\n            })\r\n            toggle();\r\n\r\n        }\r\n    }\r\n    //Removing a portfolio\r\n    removePortfolio = (i)=>{\r\n        let portfolios = this.state.portfolios;\r\n        portfolios.splice(i, 1);\r\n        this.setState({\r\n            portfolios,\r\n        })\r\n    }\r\n\r\n    //Fetching the stock value and adding to the respective portfolio\r\n    addStock = (index, toggle)=>{\r\n        if(this.state.stockName === ''){\r\n            alert('Please enter a stock name')\r\n        } else{\r\n            const stockName = this.state.stockName.toUpperCase();\r\n            const stockQuantity = this.state.stockQuantity;\r\n            let portfolios = this.state.portfolios;\r\n            axios\r\n                .get(\r\n                    `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${\r\n                        stockName\r\n                        }&interval=1min&apikey=7GD9LVHF7J90R06C&outputsize=compact`\r\n                ).then(res=>{\r\n                const data = res.data['Time Series (1min)']\r\n                const values = Object.values(data)\r\n                const unitValue = values[0]['1. open']\r\n                const total = Number.parseFloat(stockQuantity * unitValue).toFixed(3)\r\n                const totalValue = total\r\n                const stock = {\r\n                    stockName,\r\n                    unitValue,\r\n                    stockQuantity,\r\n                    totalValue,\r\n                }\r\n                portfolios[index].stocks.push(stock);\r\n                this.setState({\r\n                    portfolios,\r\n                })\r\n            }).catch(e=>alert('Stock does not exist'))\r\n            this.setState({\r\n                stockName: '',\r\n                stockQuantity: 1,\r\n            })\r\n            toggle()\r\n        }\r\n    }\r\n    //Toggling of button between show in EUR and show in USD\r\n    toggleButton = (i)=>{\r\n        this.setState({\r\n            portfolios: update(this.state.portfolios, {\r\n                [i]: {\r\n                    isEuro: {$set: !this.state.portfolios[i].isEuro},\r\n                },\r\n            }),\r\n        })\r\n    }\r\n\r\n    //Selecting and deleting the selected stock\r\n    selectedStock = (stockName)=>{\r\n        const selectedStocks = this.state.selectedStocks;\r\n        if(selectedStocks.includes(stockName)){\r\n            const index = selectedStocks.indexOf(stockName);\r\n            selectedStocks.splice(index, 1);\r\n        } else{\r\n            selectedStocks.push(stockName);\r\n        }\r\n\r\n        this.setState({\r\n            selectedStocks,\r\n        })\r\n\r\n    }\r\n\r\n    removeSelectedStocks = (i)=>{\r\n        const stocks = this.state.portfolios[i].stocks;\r\n        const selectedStocks = this.state.selectedStocks;\r\n        const newStocks = stocks.filter(item=>!selectedStocks.includes(item.stockName))\r\n\r\n        this.setState({\r\n            portfolios: update(this.state.portfolios, {\r\n                [i]: {\r\n                    stocks: {\r\n                        $set: newStocks,\r\n                    },\r\n                },\r\n            }),\r\n            selectedStocks: [],\r\n        })\r\n    }\r\n\r\n    //Calculating total value of Portfolio to 3 decimal points\r\n    countValue = (i)=>{\r\n        let value = [0];\r\n        let portfolio = this.state.portfolios[i]\r\n        portfolio.stocks.map(item=>value.push(Number(item.totalValue)))\r\n        if(portfolio.isEuro){\r\n            const totalValue = value.reduce((total, num)=>total + num)\r\n            return Number.parseFloat(totalValue).toFixed(3) + '$'\r\n        } else{\r\n            const totalValue = value.reduce((total, num)=>total + num) * this.state.exchangeRate;\r\n            return Number.parseFloat(totalValue).toFixed(3) + '€'\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const portfolios = this.state.portfolios.map((item, i)=>(\r\n            <div key={i}>\r\n                <div className=\"portfolio\">\r\n                    <div className=\"portfolioHeader\">\r\n                        <span className=\"portfolioName\">{item.name}</span>\r\n                        <span><Button color=\"secondary\" onClick={()=>this.toggleButton(i)}>{this.state.portfolios[i].isEuro ? 'Show in €' : 'Show in $'}</Button></span>\r\n                        <span><Button\r\n                            outline color=\"secondary\"\r\n                            style={{'borderRadius': '50%'}}\r\n                            onClick={()=>{if(window.confirm('Are you sure you want to delete this portfolio?')) this.removePortfolio(i)}}>X</Button>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"portfolioBody\">\r\n                        <table>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>Stock</th>\r\n                                <th>Quantity</th>\r\n                                <th>Unit Value</th>\r\n                                <th>Total Value</th>\r\n                                <th>Select</th>\r\n\r\n                            </tr>\r\n                            </thead>\r\n                            {item.stocks.map((stockItem, i)=>(\r\n                                <tbody key={i}>\r\n                                <tr>\r\n                                    <td>{stockItem.stockName}</td>\r\n                                    <td>{stockItem.stockQuantity}</td>\r\n                                    <td>{item.isEuro ?\r\n                                        Number(stockItem.unitValue) + '$' :\r\n                                        Number.parseFloat(Number(stockItem.unitValue) * this.state.exchangeRate).toFixed(3) + '€'}\r\n                                    </td>\r\n                                    <td>{item.isEuro ?\r\n                                        Number(stockItem.totalValue) + '$' :\r\n                                        Number.parseFloat(Number(stockItem.totalValue) * this.state.exchangeRate).toFixed(3) + '€'}\r\n                                    </td>\r\n                                    <td><input type=\"checkbox\" onClick={()=>this.selectedStock(stockItem.stockName)} /></td>\r\n                                </tr>\r\n                                </tbody>\r\n                            ))}\r\n\r\n                        </table>\r\n                    </div>\r\n                    <p>Total Value of {item.name}: {this.countValue(i)}</p>\r\n                    <div className=\"portfolioFooter\">\r\n                        <CreateStock\r\n                            stockName={this.state.stockName}\r\n                            stockQuantity={this.state.stockQuantity}\r\n                            handleChangeStock={this.handleChangeStock}\r\n                            addStock={this.addStock}\r\n                            index = {i}\r\n                        />\r\n                        <span><Button outline color=\"info\">Perf Graph</Button></span>\r\n                        <span><Button outline color=\"danger\" onClick={()=>this.removeSelectedStocks(i)}>Remove Selected</Button></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ))\r\n        return (\r\n            <div>\r\n                <CreatePortfolio\r\n                    portfolioName={this.state.portfolioName}\r\n                    handleChangePortfolio={this.handleChangePortfolio}\r\n                    createPortfolio={this.createPortfolio}\r\n                />\r\n                <div>\r\n                    {portfolios}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Portfolio","import React, { Component } from 'react';\nimport './App.css';\nimport Portfolio from './Portfolio';\nimport { Container } from 'reactstrap';\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"appHeader\">\n                    <h1>Stock Portfolio Management System(SPMS)</h1>\n                </div>\n                <Container fluid>\n                <Portfolio />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}